# Generated by Django 5.2.2 on 2025-09-07 08:30

import psqlextra.manager.manager
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='TelemetryDevice',
            fields=[
                (
                    'IMEI',
                    models.CharField(
                        max_length=20,
                        primary_key=True,
                        serialize=False,
                        verbose_name='設備ID (IMEI)',
                    ),
                ),
                ('name', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created_at'],
                'indexes': [
                    models.Index(
                        fields=['is_active'], name='telemetry_t_is_acti_5cd141_idx'
                    ),
                    models.Index(fields=['model'], name='telemetry_t_model_40d5dc_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='TelemetryRecord',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'telemetry_device_imei',
                    models.CharField(max_length=20, verbose_name='設備IMEI'),
                ),
                ('bike_id', models.CharField(max_length=50, verbose_name='車輛ID')),
                ('sequence_id', models.IntegerField()),
                ('gps_time', models.DateTimeField(verbose_name='GPS時間 (GT)')),
                ('rtc_time', models.DateTimeField(verbose_name='RTC時間 (RT)')),
                ('send_time', models.DateTimeField(verbose_name='發送時間 (ST)')),
                ('longitude', models.IntegerField(verbose_name='經度 (LG) * 10^6')),
                ('latitude', models.IntegerField(verbose_name='緯度 (LA) * 10^6')),
                (
                    'heading_direction',
                    models.SmallIntegerField(verbose_name='方向 (HD) 0-365度'),
                ),
                (
                    'vehicle_speed',
                    models.SmallIntegerField(verbose_name='車速 (VS) km/hr'),
                ),
                ('altitude', models.IntegerField(verbose_name='海拔 (AT) 公尺')),
                (
                    'gps_hdop',
                    models.SmallIntegerField(verbose_name='GPS HDOP (HP) * 10'),
                ),
                (
                    'gps_vdop',
                    models.SmallIntegerField(verbose_name='GPS VDOP (VP) * 10'),
                ),
                (
                    'satellites_count',
                    models.SmallIntegerField(verbose_name='衛星數量 (SA)'),
                ),
                (
                    'battery_voltage',
                    models.SmallIntegerField(verbose_name='電池電壓 (MV) * 10'),
                ),
                ('soc', models.SmallIntegerField(verbose_name='電量百分比 (SO)')),
                ('bike_odometer', models.IntegerField(verbose_name='車輛里程 (EO) 公尺')),
                (
                    'assist_level',
                    models.SmallIntegerField(verbose_name='助力等級 (AL) 0-4'),
                ),
                ('pedal_torque', models.IntegerField(verbose_name='踏板扭力 (PT) * 100')),
                (
                    'controller_temp',
                    models.IntegerField(
                        blank=True, null=True, verbose_name='控制器溫度 (CT), NULL=未讀'
                    ),
                ),
                ('pedal_cadence', models.IntegerField(verbose_name='踏板轉速 (CA) * 40')),
                (
                    'battery_temp1',
                    models.IntegerField(
                        blank=True, null=True, verbose_name='電池溫度1 (TP1), NULL=未讀'
                    ),
                ),
                (
                    'battery_temp2',
                    models.IntegerField(
                        blank=True, null=True, verbose_name='電池溫度2 (TP2), NULL=未讀'
                    ),
                ),
                ('acc_status', models.BooleanField(verbose_name='ACC狀態 (IN)')),
                ('output_status', models.SmallIntegerField(verbose_name='輸出狀態 (OP)')),
                ('analog_input', models.IntegerField(verbose_name='類比輸入 (AI1) * 1000')),
                (
                    'backup_battery',
                    models.SmallIntegerField(verbose_name='備用電池 (BV) * 10'),
                ),
                ('rssi', models.SmallIntegerField(verbose_name='訊號強度 (GQ) 0-31')),
                ('total_odometer', models.IntegerField(verbose_name='總里程 (OD) * 10')),
                (
                    'member_id',
                    models.CharField(
                        blank=True, max_length=50, verbose_name='會員ID (DD)'
                    ),
                ),
                ('report_id', models.SmallIntegerField(verbose_name='報告類型 (RD)')),
                ('message', models.CharField(blank=True, max_length=500)),
                (
                    'created_at',
                    models.DateTimeField(auto_now_add=True, verbose_name='記錄創建時間'),
                ),
                (
                    'is_synced',
                    models.BooleanField(default=False, verbose_name='是否已同步處理'),
                ),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [
                    models.Index(
                        fields=['telemetry_device_imei', 'created_at'],
                        name='telemetry_t_telemet_7f26a1_idx',
                    ),
                    models.Index(
                        fields=['bike_id', 'created_at'],
                        name='telemetry_t_bike_id_ac120f_idx',
                    ),
                    models.Index(
                        fields=['member_id'], name='telemetry_t_member__f5be08_idx'
                    ),
                    models.Index(
                        fields=['gps_time'], name='telemetry_t_gps_tim_ee245d_idx'
                    ),
                    models.Index(
                        fields=['latitude', 'longitude'],
                        name='telemetry_t_latitud_75dc38_idx',
                    ),
                    models.Index(
                        fields=['sequence_id'], name='telemetry_t_sequenc_4497b9_idx'
                    ),
                    models.Index(
                        fields=['report_id'], name='telemetry_t_report__3ed02a_idx'
                    ),
                    models.Index(
                        fields=['is_synced'], name='telemetry_t_is_sync_d0fb26_idx'
                    ),
                    models.Index(
                        fields=['telemetry_device_imei', 'sequence_id'],
                        name='telemetry_t_telemet_2df00d_idx',
                    ),
                    models.Index(
                        fields=['bike_id', 'gps_time'],
                        name='telemetry_t_bike_id_84831f_idx',
                    ),
                    models.Index(
                        fields=['is_synced', 'created_at'],
                        name='telemetry_t_is_sync_6920c1_idx',
                    ),
                ],
            },
            managers=[
                ('objects', psqlextra.manager.manager.PostgresManager()),
            ],
        ),
    ]
